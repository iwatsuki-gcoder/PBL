#include <stdio.h>
#include <stdlib.h>

struct Process {
    int pid, at, bt, pr, ct, wt, tat, rt;
    struct Process *next;
};

struct Queue {
    struct Process *front, *rear;
};

void enqueue(struct Queue *q, struct Process *p) {
    if (!q->rear)
        q->front = q->rear = p;
    else {
        q->rear->next = p;
        q->rear = p;
    }
    p->next = NULL;
}

struct Process* dequeue(struct Queue *q) {
    if (!q->front) return NULL;
    struct Process *p = q->front;
    q->front = q->front->next;
    if (!q->front) q->rear = NULL;
    return p;
}

void sortByArrival(struct Process *head) {
    struct Process *i, *j;
    int t;
    for (i = head; i; i = i->next)
        for (j = i->next; j; j = j->next)
            if (i->at > j->at) {
                t = i->pid; i->pid = j->pid; j->pid = t;
                t = i->at; i->at = j->at; j->at = t;
                t = i->bt; i->bt = j->bt; j->bt = t;
                t = i->pr; i->pr = j->pr; j->pr = t;
            }
}

void sortByBT(struct Process *head) {
    struct Process *i, *j;
    int t;
    for (i = head; i; i = i->next)
        for (j = i->next; j; j = j->next)
            if (i->bt > j->bt) {
                t = i->pid; i->pid = j->pid; j->pid = t;
                t = i->at; i->at = j->at; j->at = t;
                t = i->bt; i->bt = j->bt; j->bt = t;
                t = i->pr; i->pr = j->pr; j->pr = t;
            }
}

void sortByPriority(struct Process *head) {
    struct Process *i, *j;
    int t;
    for (i = head; i; i = i->next)
        for (j = i->next; j; j = j->next)
            if (i->pr > j->pr) {
                t = i->pid; i->pid = j->pid; j->pid = t;
                t = i->at; i->at = j->at; j->at = t;
                t = i->bt; i->bt = j->bt; j->bt = t;
                t = i->pr; i->pr = j->pr; j->pr = t;
            }
}

void resetProcesses(struct Process *head) {
    struct Process *p = head;
    while (p) {
        p->ct = p->wt = p->tat = 0;
        p = p->next;
    }
}

void display(struct Process *p, int n) {
    float avgwt = 0, avgtat = 0;
    printf("\n-------------------------------------------------------");
    printf("\nPID\tArrival\tBurst\tPriority\tWaiting\tTurnaround");
    printf("\n-------------------------------------------------------");
    for (int i = 0; i < n; i++, p = p->next) {
        printf("\nP%d\t%d\t%d\t%d\t\t%d\t%d",
               p->pid, p->at, p->bt, p->pr, p->wt, p->tat);
        avgwt += p->wt;
        avgtat += p->tat;
    }
    printf("\n-------------------------------------------------------");
    printf("\nAverage Waiting Time   : %.2f", avgwt / n);
    printf("\nAverage Turnaround Time: %.2f", avgtat / n);
    printf("\n-------------------------------------------------------\n");
}

void fcfs(struct Process *head, int n) {
    sortByArrival(head);
    int time = 0;
    struct Process *p = head;
    while (p) {
        if (time < p->at) time = p->at;
        time += p->bt;
        p->ct = time;
        p->tat = p->ct - p->at;
        p->wt = p->tat - p->bt;
        p = p->next;
    }
    printf("\n===== First Come First Serve (FCFS) Scheduling =====\n");
    display(head, n);
}

void sjf(struct Process *head, int n) {
    sortByBT(head);
    int time = 0;
    struct Process *p = head;
    while (p) {
        if (time < p->at) time = p->at;
        time += p->bt;
        p->ct = time;
        p->tat = p->ct - p->at;
        p->wt = p->tat - p->bt;
        p = p->next;
    }
    printf("\n===== Shortest Job First (SJF) Scheduling =====\n");
    display(head, n);
}

void priorityScheduling(struct Process *head, int n) {
    sortByPriority(head);
    int time = 0;
    struct Process *p = head;
    while (p) {
        if (time < p->at) time = p->at;
        time += p->bt;
        p->ct = time;
        p->tat = p->ct - p->at;
        p->wt = p->tat - p->bt;
        p = p->next;
    }
    printf("\n===== Priority Scheduling =====\n");
    display(head, n);
}

void roundRobin(struct Process *head, int n, int quantum) {
    struct Queue q = {NULL, NULL};
    struct Process *temp = head, *p;
    int time = 0, completed = 0;
    while (temp) { temp->rt = temp->bt; temp = temp->next; }
    temp = head;
    enqueue(&q, temp);
    printf("\n===== Round Robin Scheduling =====\n");
    while (completed < n) {
        p = dequeue(&q);
        if (!p) break;
        if (p->rt > quantum) {
            time += quantum;
            p->rt -= quantum;
        } else {
            time += p->rt;
            p->rt = 0;
            p->ct = time;
            p->tat = p->ct - p->at;
            p->wt = p->tat - p->bt;
            completed++;
        }
        temp = head;
        while (temp) {
            if (temp->at <= time && temp->rt > 0 && temp != p)
                enqueue(&q, temp);
            temp = temp->next;
        }
        if (p->rt > 0) enqueue(&q, p);
    }
    display(head, n);
}

int main() {
    int n, i, ch, quantum;
    struct Process *head = NULL, *temp, *p;

    printf("===== CPU Scheduling Algorithms =====\n");
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("\nEnter process details:\n");
    printf("-------------------------------------------\n");
    printf("Arrival Time  \n");
    printf("Burst Time    \n");
    printf("Priority      \n");
    printf("-------------------------------------------\n\n");

    for (i = 0; i < n; i++) {
        p = (struct Process*)malloc(sizeof(struct Process));
        printf("\n--- Enter details for Process P%d ---\n", i + 1);
        printf("Enter Arrival Time  : ");
        scanf("%d", &p->at);
        printf("Enter Burst Time    : ");
        scanf("%d", &p->bt);
        printf("Enter Priority      : ");
        scanf("%d", &p->pr);
        p->pid = i + 1;
        p->next = NULL;
        if (!head) head = temp = p;
        else { temp->next = p; temp = p; }
    }

    do {
        printf("\n=========================================\n");
        printf("               MAIN MENU                 \n");
        printf("=========================================\n");
        printf("1. First Come First Serve (FCFS)\n");
        printf("2. Shortest Job First (SJF)\n");
        printf("3. Round Robin\n");
        printf("4. Priority Scheduling\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);

        resetProcesses(head);

        switch (ch) {
            case 1:
                fcfs(head, n);
                break;
            case 2:
                sjf(head, n);
                break;
            case 3:
                printf("Enter Time Quantum: ");
                scanf("%d", &quantum);
                roundRobin(head, n, quantum);
                break;
            case 4:
                priorityScheduling(head, n);
                break;
            case 5:
                printf("\nExiting Program... Thank you!\n");
                break;
            default:
                printf("\nInvalid choice! Please try again.\n");
        }
    } while (ch != 5);

    return 0;
}
